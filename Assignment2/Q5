#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<ctype.h>

typedef struct Node {
    char data;
    struct Node *next;
} Node;

typedef struct {
    Node *top;
} Stack;

void initialize(Stack *stack) {
    stack->top = NULL;
}

int isEmpty(Stack *stack) {
    return (stack->top == NULL);
}

void push(Stack *stack, char value) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = stack->top;
    stack->top = newNode;
}

char pop(Stack *stack) {
    if (isEmpty(stack)) {
        return '\0'; // Return a sentinel value indicating an empty stack
    }

    Node *temp = stack->top;
    char value = temp->data;
    stack->top = temp->next;
    free(temp);

    return value;
}

char peek(Stack *stack) {
    if (isEmpty(stack)) {
        return '\0'; // Return a sentinel value indicating an empty stack
    }
    return stack->top->data;
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

int precedence(char operator) {
    if (operator == '+' || operator == '-')
        return 1;
    if (operator == '*' || operator == '/')
        return 2;
    return 0;
}

void infixToPostfix(const char *infix, char *postfix) {
    Stack operatorStack;
    initialize(&operatorStack);

    int infixLength = strlen(infix);
    int postfixIndex = 0;

    for (int i = 0; i < infixLength; i++) {
        char current = infix[i];

        if (isalnum(current)) {
            postfix[postfixIndex++] = current;
        } else if (current == '(') {
            push(&operatorStack, current);
        } else if (current == ')') {
            while (!isEmpty(&operatorStack) && peek(&operatorStack) != '(') {
                postfix[postfixIndex++] = pop(&operatorStack);
            }
            pop(&operatorStack); // Pop '('
        } else if (isOperator(current)) {
            while (!isEmpty(&operatorStack) && precedence(peek(&operatorStack)) >= precedence(current)) {
                postfix[postfixIndex++] = pop(&operatorStack);
            }
            push(&operatorStack, current);
        }
    }

    while (!isEmpty(&operatorStack)) {
        postfix[postfixIndex++] = pop(&operatorStack);
    }

    postfix[postfixIndex] = '\0';
}

int main() {
    char infix[100];
    char postfix[100];

   printf("Enter an infix expression: ");
                scanf("%s", infix);
                infixToPostfix(infix, postfix);
                printf("Postfix expression: %s\n", postfix);

    return 0;
}
